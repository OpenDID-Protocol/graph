// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
    ethereum,
    Address,
    BigInt
} from "@graphprotocol/graph-ts";

export class Bind extends ethereum.Event {
    get params(): Bind__Params {
        return new Bind__Params(this);
    }
}

export class Bind__Params {
    _event: Bind;

    constructor(event: Bind) {
        this._event = event;
    }

    get registrant(): Address {
        return this._event.parameters[0].value.toAddress();
    }

    get tokenId(): BigInt {
        return this._event.parameters[1].value.toBigInt();
    }

    get label(): string {
        return this._event.parameters[2].value.toString();
    }

    get value(): string {
        return this._event.parameters[3].value.toString();
    }
}

export class Controller extends ethereum.Event {
    get params(): Controller__Params {
        return new Controller__Params(this);
    }
}

export class Controller__Params {
    _event: Controller;

    constructor(event: Controller) {
        this._event = event;
    }

    get controller(): Address {
        return this._event.parameters[0].value.toAddress();
    }

    get supported(): boolean {
        return this._event.parameters[1].value.toBoolean();
    }
}

export class Label extends ethereum.Event {
    get params(): Label__Params {
        return new Label__Params(this);
    }
}

export class Label__Params {
    _event: Label;

    constructor(event: Label) {
        this._event = event;
    }

    get label(): string {
        return this._event.parameters[0].value.toString();
    }

    get add(): boolean {
        return this._event.parameters[1].value.toBoolean();
    }
}

export class Proxy extends ethereum.Event {
    get params(): Proxy__Params {
        return new Proxy__Params(this);
    }
}

export class Proxy__Params {
    _event: Proxy;

    constructor(event: Proxy) {
        this._event = event;
    }

    get proxy(): Address {
        return this._event.parameters[0].value.toAddress();
    }

    get add(): boolean {
        return this._event.parameters[1].value.toBoolean();
    }
}

export class Register extends ethereum.Event {
    get params(): Register__Params {
        return new Register__Params(this);
    }
}

export class Register__Params {
    _event: Register;

    constructor(event: Register) {
        this._event = event;
    }

    get registrant(): Address {
        return this._event.parameters[0].value.toAddress();
    }

    get tokenId(): BigInt {
        return this._event.parameters[1].value.toBigInt();
    }

    get name(): string {
        return this._event.parameters[2].value.toString();
    }
}

export class Transfer extends ethereum.Event {
    get params(): Transfer__Params {
        return new Transfer__Params(this);
    }
}

export class Transfer__Params {
    _event: Transfer;

    constructor(event: Transfer) {
        this._event = event;
    }

    get from(): Address {
        return this._event.parameters[0].value.toAddress();
    }

    get to(): Address {
        return this._event.parameters[1].value.toAddress();
    }

    get tokenId(): BigInt {
        return this._event.parameters[2].value.toBigInt();
    }
}

export class DIDRegistry extends ethereum.SmartContract {
    static bind(address: Address): DIDRegistry {
        return new DIDRegistry("DIDRegistry", address);
    }

    lookup(name: string): Address {
        let result = super.call("lookup", "lookup(string):(address)", [
            ethereum.Value.fromString(name)
        ]);

        return result[0].toAddress();
    }

    try_lookup(name: string): ethereum.CallResult<Address> {
        let result = super.tryCall("lookup", "lookup(string):(address)", [
            ethereum.Value.fromString(name)
        ]);
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(value[0].toAddress());
    }

    name(): string {
        let result = super.call("name", "name():(string)", []);

        return result[0].toString();
    }

    try_name(): ethereum.CallResult<string> {
        let result = super.tryCall("name", "name():(string)", []);
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(value[0].toString());
    }

    owner(): Address {
        let result = super.call("owner", "owner():(address)", []);

        return result[0].toAddress();
    }

    try_owner(): ethereum.CallResult<Address> {
        let result = super.tryCall("owner", "owner():(address)", []);
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(value[0].toAddress());
    }

    ownerOf(tokenId: BigInt): Address {
        let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
            ethereum.Value.fromUnsignedBigInt(tokenId)
        ]);

        return result[0].toAddress();
    }

    try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
        let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
            ethereum.Value.fromUnsignedBigInt(tokenId)
        ]);
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(value[0].toAddress());
    }

    reverseLookup(registrant: Address): string {
        let result = super.call(
            "reverseLookup",
            "reverseLookup(address):(string)",
            [ethereum.Value.fromAddress(registrant)]
        );

        return result[0].toString();
    }

    try_reverseLookup(registrant: Address): ethereum.CallResult<string> {
        let result = super.tryCall(
            "reverseLookup",
            "reverseLookup(address):(string)",
            [ethereum.Value.fromAddress(registrant)]
        );
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(value[0].toString());
    }

    toTokenId(s: string): BigInt {
        let result = super.call("toTokenId", "toTokenId(string):(uint256)", [
            ethereum.Value.fromString(s)
        ]);

        return result[0].toBigInt();
    }

    try_toTokenId(s: string): ethereum.CallResult<BigInt> {
        let result = super.tryCall("toTokenId", "toTokenId(string):(uint256)", [
            ethereum.Value.fromString(s)
        ]);
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
}
